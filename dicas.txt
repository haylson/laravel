Git do Nilton (https://github.com/NiltonMorais/codedelivery)

Comando para a instalação do laravel na vesao 5.1

- composer create-project --prefer-dist laravel/laravel nome-do-projeto 5.1.*

alterar namespace da aplicação (alterar de app para o nome que voce quer):

- php artisan app:name CodeDelivery

- Criar a pasta Models dentro de app, e jogar User dentro.


criar pacote de estrutura de repositorio (https://github.com/andersao/l5-repository)

- composer require prettus/l5-repository

add no config/app em providers:

- Prettus\Repository\Providers\RepositoryServiceProvider::class,
rodar o comando:

- php artisan vendor:publish


Instalar Pacote de Views (https://github.com/bestmomo/scafold)

- composer require bestmomo/scafold

- Bestmomo\Scafold\ScafoldServiceProvider::class, (no config/app > providers)

- php artisan vendor:publish

Criando um Controller (app/Http/Controllers)

- php artisan make:controller CategoriesController --plain

Criando View (resources/views/pasta/arquivo.blade.php)

Trabalhar com Forms 

- https://github.com/illuminate/html (para trabalhar com form no laravel 5.1)

- composer require illuminate/html

- Para versões do laravel 5.2 para cima, usar o collective/html (https://laravelcollective.com/docs/5.2/html#installation) ou (https://laravelcollective.com/docs/5.3/html)

Endereço documentação de validações
(https://laravel.com/docs/5.1/validation#available-validation-rules)

Resources > views > app.blade.php (Template inicial, alterar menu e title da pagina)


Resources > views > admin > _form.blade (para refatorar o form centralizando os campos do formulario em um arquivo unico)

Resources > views > errors > _check.blade.php (criado esse arquivo para os erros)

Criando Crud de Produtos do zero:

Criando na ordem:
- ProductsController.php (app > http > Controllers)
- Routes.php (app > http > routes)
- Resources > Views > admin > criar pasta products > arquivos blade (_form, create, edit e index)
- app.blade.php (adicionar menu produto)
- Corrigindo o BindingResolutionException e is not instantiable (adicionar os repositories de produto na pasta app > Providers > RepositoryServiceProvider)
$this->app->bind(
  'CodeDelivery\Repositories\ProductRepository',
  'CodeDelivery\Repositories\ProductRepositoryEloquent'
);
- AdminProductRequest.php (app > http > requests)


Criando Middleware:

php artisan make:middleware CheckRole

Atualizando as Seeds

php artisan migrate:refresh --seed (recria as tabelas e popula)

php artisan migrate (criar tabelas)

php artisan db:seed (popula as tabelas)

composer dump-autoload (para o composer gerar novamente os arquivos dele)


## Arquitetura

- Models > Route > Controllers > Views > Services > Repositories


## OAUTH2 (https://github.com/lucadegasperi/oauth2-server-laravel)

Documentação: https://github.com/lucadegasperi/oauth2-server-laravel/tree/master/docs#readme

Instalação:

(incluir no composer.json da seguinte forma)

composer require lucadegasperi/oauth2-server-laravel:5.1.*

Depois adicionar os providers em config/app.php dentro de ('providers' => [):

LucaDegasperi\OAuth2Server\Storage\FluentStorageServiceProvider::class,
LucaDegasperi\OAuth2Server\OAuth2ServerServiceProvider::class,

Adicionar agora a Facade em config/app.php dentro de ('aliases' => [)::

'Authorizer' => LucaDegasperi\OAuth2Server\Facades\Authorizer::class,

Adicionar em app/Http/Kernel.php no $middleware (Globais):

\LucaDegasperi\OAuth2Server\Middleware\OAuthExceptionHandlerMiddleware::class,

E colocar a Exception route no VerifyCsrfToken em app\Http\Middleware\ em protected $except colocar as rotas que devem escapar:

'oauth/access_token'

Adicionar em app/Http/Kernel.php no $routeMiddleware (middleware de Rota):

'oauth' => \LucaDegasperi\OAuth2Server\Middleware\OAuthMiddleware::class,
'oauth-user' => \LucaDegasperi\OAuth2Server\Middleware\OAuthUserOwnerMiddleware::class,
'oauth-client' => \LucaDegasperi\OAuth2Server\Middleware\OAuthClientOwnerMiddleware::class,
'check-authorization-params' => \LucaDegasperi\OAuth2Server\Middleware\CheckAuthCodeRequestMiddleware::class,

Agora dar o comando: (cria as migrations para a criação das tabelas do oauth no banco de dados).
php artisan vendor:publish

depois

php artisan migrate

---- Implementing an Authorization Server with the Password Grant (Outras configurações)

(https://github.com/lucadegasperi/oauth2-server-laravel/blob/master/docs/authorization-server/password.md)

No config/oauth2.php em 'grant_types' colocar o codigo:

'password' => [
        'class' => '\League\OAuth2\Server\Grant\PasswordGrant',
        'callback' => '\App\PasswordGrantVerifier@verify',
        'access_token_ttl' => 3600
    ]
Alterar o caminho: 
'callback' => '\App\PasswordGrantVerifier@verify', 
(para no nosso caso)
'callback' => '\CodeDelivery\OAuth2\PasswordVerifier@verify',

Criar o callback, dentro de app cria uma pasta chamada OAuth2, e dentro cria o arquivo PasswordVerifier.php

E colar o código a seguir dentro da class:

public function verify($username, $password)
  {
      $credentials = [
        'email'    => $username,
        'password' => $password,
      ];

      if (Auth::once($credentials)) {
          return Auth::user()->id;
      }

      return false;
  }

Lembrar de fazer a inmportação do Auth (use Illuminate\Support\Facades\Auth;)

Criar a rota pra gerar o token, em routes.php:

Route::post('oauth/access_token', function() {
    return Response::json(Authorizer::issueAccessToken());
});

Preencher tabela no banco de dados (oauth_clients):

INSERT INTO `oauth_clients`(`id`, `secret`, `name`, `created_at`, `updated_at`) VALUES ('appid01','secret','Meu app', null, null)

Fazer teste de autenticação pelo postman.

grant_type:       password
username:        user@user.com
password:        123456
client_id:          appid01
client_secret:    secret








